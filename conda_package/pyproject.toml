[project]
name = "mpas_tools"
dynamic = ["version"]
authors = [
    { name="Xylar Asay-Davis", email="xylar@lanl.gov" },
    { name="Matt Hoffman" },
    { name="Doug Jacobsen" },
    { name="Trevor Hillebrand" },
    { name="Michael Duda" },
    { name="Mark Petersen" },
    { name="Holly Han" },
    { name="Phillip J. Wolfram" },
    { name="Todd Ringler" },
    { name="Tong Zhang" },
    { name="Adrian K. Turner" },
    { name="Stephen Price" },
    { name="Althea Denlinger" },
    { name="Alexander Hager" },
    { name="Joseph H. Kennedy" },
    { name="Cameron Smith" },
    { name="Juan Saenz" },
    { name="Darren Engwirda" },
    { name="Andrew Nolan" },
    { name="Dom Heinzeller" },
    { name="Carolyn Begeman" },
    { name="Miles Curry" },
    { name="Luke Van Roekel" },
    { name="Mauro Perego" },
    { name="Maciej Waruszewski" },
    { name="William Lipscomb" },
    { name="Riley Brady" },
]
description = """\
    A set of tools for creating and manipulating meshes for the climate
    components based on the Model for Prediction Across Scales (MPAS) framework
    """
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    # these are only for searching/browsing projects on PyPI
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "cartopy",
    "cmocean",
    "dask",
    "inpoly",
    "matplotlib >=3.9.0",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "igraph",
    "scikit-image",
    "scipy",
    "shapely >=2.0,<3.0",
    "xarray"
]

[project.optional-dependencies]
docs = [
    # building documentation
    "sphinx >=7.0.0",
    "sphinx_rtd_theme",
    "myst-parser",
    "sphinx-multiversion",
]

dev = [
    # testing
    "pip",
    "pytest",
    "flynt",
    "pre-commit",
    "ruff",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = ["docs", "conda"]
line-length = 79

[tool.ruff.lint]
# E501 - max line-length
# E4 - whitespace
# E7 - multiple-statements
# E9 - trailing-whitespace
# F - Enable Pyflakes
# B - Enable flake8-bugbear
# W - Enable pycodestyle
# C901 - complex-structure
# D - Enable flake8-docstrings
select = ["E501", "E4", "E7", "E9", "F", "B", "W", "C901"]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 18.
max-complexity = 18

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[build-system]
requires = ["setuptools>=60"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
exclude = ["ci*", "docs*", "recipe*"]

[tool.setuptools.dynamic]
version = { attr = "mpas_tools.__init__.__version__" }

# evolution of options.entry-points
[project.scripts]
planar_hex = "mpas_tools.planar_hex:main"
translate_planar_grid = "mpas_tools.translate:main"
merge_grids = "mpas_tools.merge_grids:main"
split_grids = "mpas_tools.split_grids:main"
inject_bathymetry = "mpas_tools.ocean.inject_bathymetry:main"
inject_preserve_floodplain = "mpas_tools.ocean.inject_preserve_floodplain:main"
ocean_add_depth = "mpas_tools.ocean.depth:main_add_depth"
ocean_add_zmid = "mpas_tools.ocean.depth:main_add_zmid"
ocean_write_time_varying_zmid = "mpas_tools.ocean.depth:main_write_time_varying_zmid"
plot_ocean_transects = "mpas_tools.ocean.viz.transect.plot:plot_feature_transects_main"
mpas_to_triangle = "mpas_tools.mesh.creation.mpas_to_triangle:main"
triangle_to_netcdf = "mpas_tools.mesh.creation.triangle_to_netcdf:main"
jigsaw_to_netcdf = "mpas_tools.mesh.creation.jigsaw_to_netcdf:main"
build_jigsaw = "mpas_tools.mesh.creation.jigsaw_driver:main_build_jigsaw"
sort_mesh = "mpas_tools.mesh.creation.sort_mesh:main"
scrip_from_mpas = "mpas_tools.scrip.from_mpas:main"
compute_mpas_region_masks = "mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks"
compute_mpas_transect_masks = "mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks"
compute_mpas_flood_fill_mask = "mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask"
compute_lon_lat_region_masks = "mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks"
compute_projection_region_masks = "mpas_tools.mesh.mask:entry_point_compute_projection_grid_region_masks"
prepare_seaice_partitions = "mpas_tools.seaice.partition:prepare_partitions"
create_seaice_partitions = "mpas_tools.seaice.partition:create_partitions"
simple_seaice_partitions = "mpas_tools.seaice.partition:simple_partitions"
vector_reconstruct = "mpas_tools.vector.reconstruct:main"
mark_horns_for_culling = "mpas_tools.mesh.mark_horns_for_culling:main"
set_lat_lon_fields_in_planar_grid = "mpas_tools.mesh.set_lat_lon:main"
create_scrip_file_from_mpas_mesh = "mpas_tools.scrip.from_mpas:main"
create_scrip_file_from_planar_rectangular_grid = "mpas_tools.scrip.from_planar:main"
create_landice_grid_from_generic_mpas_grid = "mpas_tools.landice.create:create_from_generic_mpas_grid"
define_landice_cull_mask = "mpas_tools.landice.cull:define_cull_mask"
interpolate_to_mpasli_grid = "mpas_tools.landice.interpolate:interpolate_to_mpasli_grid"
mark_domain_boundaries_dirichlet = "mpas_tools.landice.boundary:mark_domain_boundaries_dirichlet"
add_critical_land_blockages_to_mask = "mpas_tools.ocean.coastline_alteration:main_add_critical_land_blockages"
add_land_locked_cells_to_mask = "mpas_tools.ocean.coastline_alteration:main_add_land_locked_cells_to_mask"
widen_transect_edge_masks = "mpas_tools.ocean.coastline_alteration:main_widen_transect_edge_masks"
moc_southern_boundary_extractor = "mpas_tools.ocean.moc:moc_southern_boundary_extractor"
paraview_vtk_field_extractor = "mpas_tools.viz.paraview_extractor:main"

[project.urls]
Documentation = "http://mpas-dev.github.io/MPAS-Tools/master/"
"Bug Tracker" = "https://github.com/MPAS-Dev/MPAS-Tools/issues"
